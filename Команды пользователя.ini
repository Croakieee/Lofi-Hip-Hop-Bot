/id - краткая инф. пользователя 
/stats - общ. статистика пользователя
/report - обратиться в поддержку (через тикет в определенном чате) # точнее канал поддержки ответов на вопросы  
/mtop - топ актив пользователя
/cmd - изменение названия команд  
/chatid - id чата
--------------------------------------------------------------------------------
/kick - исключить пользователя
/mute - заблокировать чат пользователя ( временное (??))
/warn - выдать предупреждение ( система предупреждений с накоплением warn-ов через id в логи)
/clear - ОЧИСТИТЬ  
/staff - список пидоров которые мне не платят 
/check (хер пойми реализаци этой команды (история наказаний))
----------------------------------------------------------------------------------
/unmute - снять блокировку чата 
/unwarn - снять предупреждение
/mutelist - список пользователей в муте 
/warnlist - список пользователей с предупреждением
----------------------------------------------------------------------------------
#логирование наказаний в закрытй канал ()
#раздел приват комнаты создать/настроить - бот должен создать гс комнату с настройками по кол-ву участников разговора и т.д после выхода всех участников комната удаляется
/banlist - логи забаненых игроков за n время 
/zov - команда @everyone от бота 
#реализовать автоматического включения медленного режима при флуде и более 50 предупреждений о спаме от бота 
/query - команда муз бота для добавления очереди произведение 
#добавить поиск по ютубу через текст запросс 
---------------------------------------------------------
Готово-
/join
/leave
/play_radio
/play_other
/stop
/del_messages {№}
-----------------------------------
Используя библиотеку nextcord и подход с использованием slash-команд.

1./id – Краткая инф. о пользователе

@bot.slash_command(description="Показать краткую информацию о пользователе")
async def id(ctx: nextcord.Interaction, user: nextcord.Member = None):
    user = user or ctx.user
    embed = nextcord.Embed(title=f"Информация о {user}", description=f"ID: {user.id}\nИмя: {user.display_name}")
    await ctx.send(embed=embed)

2./stats – Общая статистика пользователя

@bot.slash_command(description="Показать общую статистику пользователя")
async def stats(ctx: nextcord.Interaction):
    # Пример вывода статистики (замени на реальные данные)
    stats = f"Сообщений: 100\nАктивность: высокая"
    await ctx.send(f"Статистика пользователя {ctx.user}: {stats}")

3./report – Обратиться в поддержку (тикет в определённый канал)

@bot.slash_command(description="Создать тикет для обращения в поддержку")
async def report(ctx: nextcord.Interaction, issue: str):
    support_channel = bot.get_channel(123456789)  # Заменить на ID канала поддержки
    await support_channel.send(f"Тикет от {ctx.user}: {issue}")
    await ctx.send("Ваш тикет отправлен в поддержку.")

4./mtop – Топ актив пользователя

@bot.slash_command(description="Показать топ активных пользователей")
async def mtop(ctx: nextcord.Interaction):
    # Пример топа активности
    top_active = "1. User1 - 500 сообщений\n2. User2 - 450 сообщений"
    await ctx.send(f"Топ активности пользователей:\n{top_active}")

5./cmd – Изменение названия команд

@bot.slash_command(description="Изменить название команды")
async def cmd(ctx: nextcord.Interaction, old_cmd: str, new_cmd: str):
    # Логика изменения названия команды
    await ctx.send(f"Команда `{old_cmd}` была изменена на `{new_cmd}`")

6./chatid – ID чата

@bot.slash_command(description="Показать ID текущего чата")
async def chatid(ctx: nextcord.Interaction):
    await ctx.send(f"ID этого чата: {ctx.channel.id}")

7./kick – Исключить пользователя

@bot.slash_command(description="Исключить пользователя")
async def kick(ctx: nextcord.Interaction, member: nextcord.Member, reason: str = None):
    await member.kick(reason=reason)
    await ctx.send(f"{member.display_name} был исключён.")

8./mute – Заблокировать чат пользователя

@bot.slash_command(description="Заблокировать чат пользователя")
async def mute(ctx: nextcord.Interaction, member: nextcord.Member, duration: int = 10):
    # Реализовать логику мута с таймером
    await ctx.send(f"{member.display_name} был замьючен на {duration} минут.")

9./warn – Выдать предупреждение

@bot.slash_command(description="Выдать предупреждение пользователю")
async def warn(ctx: nextcord.Interaction, member: nextcord.Member, reason: str = None):
    # Логика предупреждений и записи в логи
    await ctx.send(f"{member.display_name} получил предупреждение: {reason}")

10./clear – Очистить чат #готово в МБоте

@bot.slash_command(description="Очистить чат")
async def clear(ctx: nextcord.Interaction, amount: int):
    await ctx.channel.purge(limit=amount)
    await ctx.send(f"Удалено {amount} сообщений.")

11./staff – Список пидоров которые не платят

#показывает участников с опред. ролями

12./check – История наказаний

@bot.slash_command(description="Показать историю наказаний пользователя")
async def check(ctx: nextcord.Interaction, member: nextcord.Member):
    # Логика показа истории наказаний
    await ctx.send(f"История наказаний {member.display_name}: ...")

13./unmute – Снять блокировку чата

@bot.slash_command(description="Снять блокировку чата")
async def unmute(ctx: nextcord.Interaction, member: nextcord.Member):
    # Логика разблокировки
    await ctx.send(f"{member.display_name} разблокирован.")

14./unwarn – Снять предупреждение

@bot.slash_command(description="Снять предупреждение")
async def unwarn(ctx: nextcord.Interaction, member: nextcord.Member):
    # Логика снятия предупреждения
    await ctx.send(f"Предупреждение с {member.display_name} снято.")

15./mutelist – Список пользователей в муте

@bot.slash_command(description="Показать список пользователей в муте")
async def mutelist(ctx: nextcord.Interaction):
    # Пример списка замьюченных
    muted_users = "User1, User2"
    await ctx.send(f"Пользователи в муте: {muted_users}")

16./warnlist – Список пользователей с предупреждением

@bot.slash_command(description="Показать список пользователей с предупреждениями")
async def warnlist(ctx: nextcord.Interaction):
    # Пример списка с предупреждениями
    warned_users = "User1, User2"
    await ctx.send(f"Пользователи с предупреждениями: {warned_users}")

17.Логирование наказаний в закрытый канал

    #Можно добавить логику отправки всех наказаний в специальный закрытый канал для модерации.

    # Пример логирования
log_channel = bot.get_channel(123456789)  # Заменить на ID канала логов
await log_channel.send(f"{member.display_name} получил наказание: {reason}")

18.Приватные комнаты (автоматическое создание и удаление)

@bot.slash_command(description="Создать приватную комнату")
async def create_private_room(ctx: nextcord.Interaction, user_limit: int):
    # Логика создания комнаты
    await ctx.send(f"Создана приватная комната с лимитом {user_limit} участников.")

19./banlist – Логи забаненных игроков

@bot.slash_command(description="Показать логи забаненных пользователей")
async def banlist(ctx: nextcord.Interaction, days: int = 7):
    # Пример логов
    banned_users = "User1, User2"
    await ctx.send(f"Забаненные за последние {days} дней: {banned_users}")

20./zov – Команда @everyone от бота

@bot.slash_command(description="Оповестить всех в чате")
async def zov(ctx: nextcord.Interaction):
    await ctx.send("@everyone Внимание всем!")

21.Автоматическое включение медленного режима

#Реализовать мониторинг частоты сообщений и при флуде включать медленный режим:

if spam_warnings > 50:
    await ctx.channel.edit(slowmode_delay=10)  # Включаем медленный режим на 10 секунд

22./query – Добавить трек в очередь музыкального бота

@bot.slash_command(description="Добавить трек в очередь")
async def query(ctx: nextcord.Interaction, song: str):
    # Логика добавления песни
    await ctx.send(f"Песня '{song}' добавлена в очередь.")


23.Поиск по YouTube по текстовому запросу

    #Можно использовать API YouTube или библиотеку yt-dlp для поиска по запросам.

